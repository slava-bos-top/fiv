import asyncio
import re
import json

from aiogram import Bot, Dispatcher, F
from app.handlers import router
import app.keyboards as kb
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    BotCommand,
    MenuButtonCommands,
    MenuButtonDefault,
    BotCommandScopeDefault,
    BotCommandScopeChat,
    ReplyKeyboardRemove,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import Config

import gspread
from oauth2client.service_account import ServiceAccountCredentials

import hashlib
import string

from app.storage import user_phone_map

Config.load()
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
dp = Dispatcher()
dp.include_router(router)


class Register(StatesGroup):
    name = State()
    secondName = State()
    years = State()
    password = State()
    number = State()
    yourNumber = State()


@router.message(Command("start"))
async def register(message: Message, state: FSMContext):
    print("Hello")
    user_data = await state.get_data()
    if user_data.get("enabled") != True:
        await bot.set_my_commands([], scope=BotCommandScopeDefault())
        await bot.set_chat_menu_button(
            chat_id=message.chat.id, menu_button=MenuButtonDefault()
        )
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç! –í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –≤ –±–æ—Ç—ñ FivOne. –¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –∫—É—Ä—Å–∏ —Ç–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∏, —è–∫—ñ —Å—Ç–≤–æ—Ä–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —ñ —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ –æ–ø–∞–Ω—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è –ª–µ–≥–∫–æ, —Ü—ñ–∫–∞–≤–æ —Ç–∞ –≤–µ—Å–µ–ª–æ!",
        )
        await message.answer(
            "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è —á–∏ —É–≤—ñ–π–¥–∏ —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç",
            reply_markup=kb.regestration,
        )
    else:
        await message.answer("–í–∏ –≤–∂–µ —É–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç")


# –£–≤—ñ–π—Ç–∏
@router.message(F.text == "–£–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç")
async def register_singin(message: Message, state: FSMContext):
    await state.set_state(Register.yourNumber)
    await message.answer(
        "–í—ñ–¥–ø—Ä–∞–≤ —Å–≤—ñ–π –Ω–æ–º–µ—Ä, –¥–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É",
        reply_markup=kb.get_number,
    )


@router.message(StateFilter(Register.yourNumber), F.contact)
async def register_yornum(message: Message, state: FSMContext):
    await state.update_data(number=message.contact)
    await message.answer("–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è...", reply_markup=ReplyKeyboardRemove())
    data = await state.get_data()
    number = list(data["number"])[0][1]
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    # creds = ServiceAccountCredentials.from_json_keyfile_name("cred.json", scope)
    cred_json_str = Config.GOOGLE_CREDENTIALS

    cred_dict = json.loads(cred_json_str)
    cred_dict["private_key"] = cred_dict["private_key"].replace("\\n", "\n")

    creds = ServiceAccountCredentials.from_json_keyfile_dict(cred_dict, scope)
    client = gspread.authorize(creds)

    sheet = client.open_by_url(
        "https://docs.google.com/spreadsheets/d/17lcrlxUhcervwQTOctLZkdvBVpAwyuWu7DQQ3d_oVSQ/edit?usp=sharing"
    ).sheet1
    phone_column = sheet.col_values(5)
    number = number.replace("(", "").replace(")", "").replace(" ", "")
    if number in phone_column:
        user_phone_map[message.from_user.id] = number
        await message.answer("–í—ñ—Ç–∞—î–º–æ! –í–∏ —É–≤—ñ–π—à–ª–∏ —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç!")
        await state.clear()
        await bot.set_my_commands(
            [
                BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"),
            ],
            scope=BotCommandScopeChat(chat_id=message.chat.id),
        )
        await message.answer(
            "–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é (–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ - —Ç—Ä–∏ —Ä–∏—Å–æ—á–∫–∏ –≤–Ω–∏–∑—É –∑–ª—ñ–≤–∞). –¶—è –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ —Ç–µ–±–µ –¥–æ –ì–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–∏—Ä–∞–π –º–∞—Ä–∞—Ñ–æ–Ω —á–∏ –∫—É—Ä—Å, —è–∫–∏–π —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏–≤, –æ–∑–Ω–∞–π–æ–º–ª—é–π—Å—è –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ —É—Ä–æ–∫—É, –≤–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –¥–∏–≤—É–π —Å–≤–æ—ó–º–∏ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞–Ω–Ω—è–º–∏ –æ—Ç–æ—á—É—é—á–∏—Ö! –ó–∞–ø—Ä–æ—à—É–π –¥—Ä—É–∑—ñ–≤ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è, –∞–¥–∂–µ —Ä–∞–∑–æ–º –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è —â–æ—Å—å –Ω–æ–≤–µ –∑–∞–≤–∂–¥–∏ —Ü—ñ–∫–∞–≤—ñ—à–µ! –ü–æ—á–∏–Ω–∞–π–º–æ! \nüëá",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.update_data(enabled=True)
    else:
        await message.answer(
            "–ê–∫–∞—É–Ω—Ç–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º, –Ω–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å, –¥–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
            reply_markup=kb.reg,
        )


# –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å
@router.message(F.text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å")
async def register_name(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer("–î–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å!", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º'—è")


@router.message(Register.name)
async def register_city(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.secondName)
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ")


@router.message(Register.secondName)
async def register_city(message: Message, state: FSMContext):
    await state.update_data(secondName=message.text)
    await state.set_state(Register.years)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")


@router.message(Register.years)
async def register_city(message: Message, state: FSMContext):
    text = message.text.strip()

    if re.fullmatch(r"[1-9]\d?", text):
        await state.update_data(years=message.text)
        await state.set_state(Register.password)
        await message.answer(
            "–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å, —è–∫–∏–π –±—É–¥–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—å –Ω–µ –º–µ–Ω—à–µ, –Ω—ñ–∂ –∑ 8 —Å–∏–º–≤–æ–ª—ñ–≤ (—Ü–∏—Ñ—Ä–∏ —Ç–∞ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏)"
        )
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏ 1 –∞–±–æ 2 —Ü–∏—Ñ—Ä–∏, –±–µ–∑ –Ω—É–ª—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É.")


@router.message(Register.password)
async def register_city(message: Message, state: FSMContext):
    await state.update_data(password=message.text)

    allowed_chars = set(string.ascii_letters + string.digits + string.punctuation)

    has_letter = any(c.isalpha() and c in string.ascii_letters for c in message.text)
    has_digit = any(c.isdigit() for c in message.text)
    only_allowed = all(c in allowed_chars for c in message.text)
    upper = any(char.isupper() for char in message.text)

    if only_allowed == True:
        if len(message.text) >= 8:
            if has_letter == True and has_digit == True:
                if upper == True:
                    await state.set_state(Register.number)
                    await message.answer(
                        "–ó–∞–ª–∏—à, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± —É —Ä–∞–∑—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ, –º–∏ –º–æ–≥–ª–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Ç–æ–±–æ—é. –î–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É",
                        reply_markup=kb.get_number,
                    )
                else:
                    await message.answer("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É")
                    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –ø–∞—Ä–æ–ª—å")
            else:
                await message.answer("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª—ñ—Ç–µ—Ä–∏ –π —Ü–∏—Ñ—Ä–∏")
                await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –ø–∞—Ä–æ–ª—å")
        else:
            await message.answer("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤")
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –ø–∞—Ä–æ–ª—å")
    else:
        await message.answer("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ –∑ –ª–∞—Ç–∏–Ω–∏—Ü—ñ")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –ø–∞—Ä–æ–ª—å")


@router.message(StateFilter(Register.number), F.contact)
async def register_city(message: Message, state: FSMContext):
    await message.answer("–î–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è...", reply_markup=ReplyKeyboardRemove())
    await state.update_data(number=message.contact)
    data = await state.get_data()
    number = list(data["number"])[0][1]
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    # creds = ServiceAccountCredentials.from_json_keyfile_name("cred.json", scope)
    cred_json_str = Config.GOOGLE_CREDENTIALS

    cred_dict = json.loads(cred_json_str)
    cred_dict["private_key"] = cred_dict["private_key"].replace("\\n", "\n")
    creds = ServiceAccountCredentials.from_json_keyfile_dict(cred_dict, scope)
    client = gspread.authorize(creds)
    spreadsheet = client.open_by_url(
        "https://docs.google.com/spreadsheets/d/17lcrlxUhcervwQTOctLZkdvBVpAwyuWu7DQQ3d_oVSQ/edit?usp=sharing"
    )

    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    # creds = ServiceAccountCredentials.from_json_keyfile_name("cred.json", scope)
    cred_json_str = Config.GOOGLE_CREDENTIALS

    cred_dict = json.loads(cred_json_str)
    cred_dict["private_key"] = cred_dict["private_key"].replace("\\n", "\n")
    creds = ServiceAccountCredentials.from_json_keyfile_dict(cred_dict, scope)

    client = gspread.authorize(creds)

    sheet = client.open_by_url(
        "https://docs.google.com/spreadsheets/d/17lcrlxUhcervwQTOctLZkdvBVpAwyuWu7DQQ3d_oVSQ/edit?usp=sharing"
    ).sheet1
    phone_column = sheet.col_values(5)

    sheet = spreadsheet.sheet1
    name = data["name"]
    surname = data["secondName"]
    year = data["years"]
    password = data["password"]
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    number = number.replace("(", "").replace(")", "").replace(" ", "")
    if number in phone_column:
        await message.answer(
            "–ê–∫–∞—É–Ω—Ç –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω. –£–≤—ñ–π–¥–∏ —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç",
            reply_markup=kb.singIn,
        )
        await state.clear()
    else:
        phone = number
        user_phone_map[message.from_user.id] = phone
        user_data = [name, surname, year, hashed_password, phone]
        for i in range(0, 99):
            user_data.append(0)
        sheet.append_row(user_data)
        user_data.clear()
        await message.answer(
            "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ñ—Ç–∞—î–º–æ –≤ –∫–ª—É–±—ñ —Ä–æ–∑—É–º–Ω–∏–∫—ñ–≤ —Ç–∞ —Ä–æ–∑—É–º–Ω–∏—Ü—å! üòâ"
        )
        await message.answer(
            "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∏—à–µ —É–≤—ñ–π—Ç–∏ —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç, –¥–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
            reply_markup=kb.singIn,
        )
        await state.clear()


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ!")

