from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram import Router, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest
import json

import app.keyboards as kb

with open("lessons.json", "r", encoding="utf-8") as f:
    LESSONS = json.load(f)

router = Router()

num = []
way = []
marafons = [
    "–§—ñ–∑–∏–∫–∞",
    "–•—ñ–º—ñ—è",
    "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å",
    "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
    "–ù–æ–≤–æ—Ä—ñ—á–Ω–∏–π",
]
weeks = ["–¢–∏–∂–¥–µ–Ω—å 1", "–¢–∏–∂–¥–µ–Ω—å 2", "–¢–∏–∂–¥–µ–Ω—å 3"]
lessons = ["–£—Ä–æ–∫ 1", "–£—Ä–æ–∫ 2", "–£—Ä–æ–∫ 3", "–£—Ä–æ–∫ 4", "–£—Ä–æ–∫ 5", "–£—Ä–æ–∫ 6", "–£—Ä–æ–∫ 7"]

explat = []
imgCr = []


# callback
@router.callback_query(F.data == "–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!")
async def homework_done_callback(callback: CallbackQuery):
    await callback.answer("–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! ‚úÖ", show_alert=True)


@router.callback_query(F.data == "next")
async def homework_done_callbacktask(callback: CallbackQuery):
    keyboard_name = f"lesson{way[0]}"

    selected_keyboard = getattr(kb, keyboard_name)

    await callback.message.answer("–û–±–µ—Ä–∏ —É—Ä–æ–∫", reply_markup=selected_keyboard)


@router.callback_query(F.data == "nextsecond")
async def homework_done_callbacktasksec(callback: CallbackQuery):
    keyboard_name = f"lessonForWeekSecond{way[0]}"

    selected_keyboard = getattr(kb, keyboard_name)

    await callback.message.answer("–û–±–µ—Ä–∏ —É—Ä–æ–∫", reply_markup=selected_keyboard)


@router.callback_query(F.data == "nextthird")
async def homework_done_callbacktasksec(callback: CallbackQuery):
    keyboard_name = f"lessonForWeekThird{way[0]}"

    selected_keyboard = getattr(kb, keyboard_name)

    await callback.message.answer("–û–±–µ—Ä–∏ —É—Ä–æ–∫", reply_markup=selected_keyboard)


@router.callback_query(F.data == "nextweek")
async def homework_done_callbackweek(callback: CallbackQuery):
    await callback.message.answer("–û–±–∏—Ä–∞–π —Ç–∏–∂–¥–µ–Ω—å!", reply_markup=kb.week)


@router.callback_query(F.data == "explation")
async def homework_done_callbacktask(callback: CallbackQuery):
    image = FSInputFile(imgCr[0])
    await callback.message.answer_photo(
        caption=f"{explat[0]}", photo=image, parse_mode="HTML"
    )


# start
@router.message(Command("menu"))
async def start(message: Message):
    await message.answer("–û–±–∏—Ä–∞–π—Ç–µ –º–∞—Ä–∞—Ñ–æ–Ω —á–∏ –∫—É—Ä—Å", reply_markup=kb.main)


@router.message(F.text == "–ú–∞—Ä–∞—Ñ–æ–Ω–∏")
async def Task(message: Message):
    num.clear()
    way.clear()
    await message.answer("–û–±–µ—Ä–∏ –º–∞—Ä–∞—Ñ–æ–Ω", reply_markup=kb.marafons)


@router.message(
    F.text.in_(
        [
            "–§—ñ–∑–∏–∫–∞",
            "–•—ñ–º—ñ—è",
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å",
            "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
            "–ù–æ–≤–æ—Ä—ñ—á–Ω–∏–π",
        ]
    )
)
async def Marafons(message: Message):
    for i in marafons:
        if i == str(message.text):
            index = marafons.index(i)
    way.append(index)
    if index == 0:
        await message.answer(
            "<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! </b>üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –ú–∞—Ä–∞—Ñ–æ–Ω—ñ –∑ —Ñ—ñ–∑–∏–∫–∏.\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –í –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –±—É–¥–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è - –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑ –ø–µ–≤–Ω–æ—ó —Ç–µ–º–∏ —Ñ—ñ–∑–∏–∫–∏. –¢–∞–∫–æ–∂ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –ª–µ–∫—Ü—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ.\n\n–ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ —É—Ä–æ–∫—É —Ç—É—Ç –∑'—è–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º —É—Ä–æ–∫—É ‚ö°Ô∏è\n\n–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å. \n\n–û—Ç–∂–µ, <b>3-2-1 –ø–æ–ª–µ–µ–µ–µ—Ç—ñ–ª–∏</b> üöÄ",
            parse_mode="HTML",
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–ª—ñ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤",
                        url="https://docs.google.com/document/d/1ldW3nXfz78LBNLe6Lm6owQyTzYpK1RdybqvZve3JeuY/edit?usp=drivesdk",
                    )
                ]
            ]
        )
        await message.answer(
            text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤, –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º üëá",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    elif index == 1:
        await message.answer(
            "<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! </b>üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –ú–∞—Ä–∞—Ñ–æ–Ω—ñ –∑ —Ö—ñ–º—ñ—ó.\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –í –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –±—É–¥–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è - –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∞–±–æ —Å–∏–º—É–ª—è—Ü—ñ—è –∑ –ø–µ–≤–Ω–æ—ó —Ç–µ–º–∏ —Ö—ñ–º—ñ—ó. –¢–∞–∫–æ–∂ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à —Ç–µ–∫—Å—Ç–æ–≤—É –≤–µ—Ä—Å—ñ—é –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É.\n\n–ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ —É—Ä–æ–∫—É —Ç—É—Ç –∑'—è–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º —É—Ä–æ–∫—É ‚ö°Ô∏è\n\n–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å. \n\n–û—Ç–∂–µ, <b>3-2-1 –ø–æ–ª–µ–µ–µ–µ—Ç—ñ–ª–∏ </b>üöÄ",
            parse_mode="HTML",
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–ª—ñ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤",
                        url="https://docs.google.com/document/d/1lTgqZk1gTo1tA3iQwMdrlxuustXzRJFW0C9LBmd4Hec/edit?usp=drivesdk",
                    )
                ]
            ]
        )
        await message.answer(
            text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤ üëá",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    elif index == 2:
        await message.answer(
            "<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç!</b> üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –ú–∞—Ä–∞—Ñ–æ–Ω—ñ –∑ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ.\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –í –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –±—É–¥–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è - –Ω–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. \n\n–¢–∞–∫–æ–∂ –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ —É—Ä–æ–∫—É —Ç—É—Ç –∑'—è–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º —É—Ä–æ–∫—É ‚ö°Ô∏è\n\n–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å.  \n\n–û—Ç–∂–µ, <b>3-2-1 –ø–æ—á–∏–Ω–∞—î–º–æ –º–∏—Å–ª–∏—Ç–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ</b> ‚òÄÔ∏è",
            parse_mode="HTML",
        )
    elif index == 3:
        await message.answer(
            "<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! </b>üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –Ü–¢ –º–∞—Ä–∞—Ñ–æ–Ω—ñ.\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –ú–∞—Ä–∞—Ñ–æ–Ω —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –Ω–∞ —Ç—Ä–∏ —Ç–∏–∂–Ω—ñ. –ù–µ–¥—ñ–ª—è - –≤–∏—Ö—ñ–¥–Ω–∏–πüòâ\n\n<b>–í–∞–∂–ª–∏–≤–æ:</b>\n1. –ñ–æ–≤—Ç—ñ —Å–ª–∞–π–¥–∏ —É –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—è—Ö —Ç–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è—Ö - —Ü–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∞–±–æ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –û—Å–Ω–æ–≤–Ω–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑'—è–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º —Ç—É—Ç –≤ –∫–∞–Ω–∞–ª—ñ.\n\n2. –ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –ø–µ—Ä—à–æ–≥–æ —Ç–∏–∂–Ω—è —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à —Ç–µ—Å—Ç. –ü—Ä–æ–π–¥–∏ –π–æ–≥–æ —è–∫–Ω–∞–π–∫—Ä–∞—â–µ!\n\n3. –¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å. –£—Å–ø—ñ—Ö—É!\n\n<b>–ü–æ–±—ñ–≥–ª–∏-–∏–∏-–∏–∏–∏! </b>üèÉ",
            parse_mode="HTML",
        )
    else:
        image = FSInputFile("app/media/marafons/New/mater.jpg")
        await message.answer_photo(
            photo=image,
            caption="<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! </b>üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –ù–æ–≤–æ—Ä—ñ—á–Ω–æ–º—É –º–∞—Ä–∞—Ñ–æ–Ω—ñ üéÑ\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –£ –≤—ñ–¥–µ–æ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –≤—Å—ñ –µ—Ç–∞–ø–∏: –≤—ñ–¥ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–æ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —ñ–≥—Ä–∞—à–æ–∫.\n\n–¢–∞–∫–æ–∂ —É –¥–µ—è–∫—ñ –¥–Ω—ñ —Ç—É—Ç –∑'—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤—ñ–¥–µ–æ, –≤ —è–∫–æ–º—É –ª–µ–∫—Ç–æ—Ä–∫–∞ –∑–Ω–∞–π–æ–º–∏—Ç–∏–º–µ —Ç–µ–±–µ –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ —Ç–∞ –¥–∞–≤–∞—Ç–∏–º–µ —Ü—ñ–∫–∞–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è üòâ\n\n–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞ –º–∞–π—Å—Ç—Ä—É–≤–∞—Ç–∏ —ñ–≥—Ä–∞—à–∫–∏ —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å.\n\n–¢–∞–∫–æ–∂ –æ—Å—å —Ñ–∞–π–ª –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ (https://drive.google.com/file/d/1SAEblqDHBBaXE5SY68NNLal1vsMprbIa/view?usp=sharing), —è–∫—ñ —Ç–æ–±—ñ –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è.\n\nüòÅ –†–∞–¥–∏–º–æ –≤–∏–≥–æ—Ç–æ–≤–ª—è—Ç–∏ —ñ–≥—Ä–∞—à–∫–∏ –≤—Å—ñ—î—é —Å—ñ–º'—î—é –∞–±–æ —Ä–∞–∑–æ–º –∑ –¥—Ä—É–∑—è–º–∏, –±–æ —Ç–∞–∫ –≤–µ—Å–µ–ª—ñ—à–µ!\n–î—ñ–ª–∏—Å—å –∑ –¥—Ä—É–∑—è–º–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é —Ç–∞ –∑–∞–ø—Ä–æ—à—É–π –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω!\n\n<b>–¶–µ –±—É–¥–µ –∫–ª–∞—Å–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å! </b>‚õÑÔ∏è",
            parse_mode="HTML",
        )
    if index < 4:
        await message.answer("–û–±–µ—Ä–∏ —Ç–∏–∂–¥–µ–Ω—å", reply_markup=kb.week)
    else:
        await message.answer("–û–±–µ—Ä–∏ —Ç–∏–∂–¥–µ–Ω—å", reply_markup=kb.week1)


@router.message(F.text.in_(["–¢–∏–∂–¥–µ–Ω—å 1", "–¢–∏–∂–¥–µ–Ω—å 2", "–¢–∏–∂–¥–µ–Ω—å 3"]))
async def Week(message: Message):
    for i in weeks:
        if i == str(message.text):
            index = weeks.index(i)
    way.append(index)
    if index == 0:
        keyboard_name = f"lesson{way[0]}"

        selected_keyboard = getattr(kb, keyboard_name)

        await message.answer("–û–±–µ—Ä–∏ —É—Ä–æ–∫", reply_markup=selected_keyboard)
    elif index == 1:
        keyboard_name = f"lessonForWeekSecond{way[0]}"

        selected_keyboard = getattr(kb, keyboard_name)

        await message.answer("–û–±–µ—Ä–∏ —É—Ä–æ–∫", reply_markup=selected_keyboard)
    else:
        keyboard_name = f"lessonForWeekThird{way[0]}"

        selected_keyboard = getattr(kb, keyboard_name)

        await message.answer("–û–±–µ—Ä–∏ —É—Ä–æ–∫", reply_markup=selected_keyboard)


# tesks
@router.message(
    F.text.startswith(
        tuple(
            [
                "–£—Ä–æ–∫ 1",
                "–£—Ä–æ–∫ 2",
                "–£—Ä–æ–∫ 3",
                "–£—Ä–æ–∫ 4",
                "–£—Ä–æ–∫ 5",
                "–£—Ä–æ–∫ 6",
                "–£—Ä–æ–∫ 7",
                "–ù–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫",
            ]
        )
    )
)
async def Lesson(message: Message):
    if len(way) != 0:
        num.append(way[0])
        num.append(way[1])
        for i in lessons:
            if i == str(message.text[:6]):
                index = lessons.index(i)
        num.append(index)
    lesson = LESSONS[int(num[0])]
    week = lesson[f"week_{int(num[1])}"]
    tesks = week[f"tesks_{int(num[2])}"]
    image = FSInputFile(tesks["image"])
    caption = f"<b>{tesks['text']}</b>"
    await message.answer_photo(
        photo=image, caption=caption, parse_mode="HTML", reply_markup=kb.main
    )
    textVideo = tesks["textVideo"]
    button_text = tesks["button_text"]
    video_url = tesks["video_url"]
    if video_url != "0":
        text = f'<a href="{video_url}">{textVideo}</a>'
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{button_text}", url=f"{video_url}")]
            ]
        )
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=False,
        )

    document = tesks["docs"]
    caption = tesks["textDocs"]
    text = f'<a href="{document}">{caption}</a>'
    if document != "0":
        await message.answer(
            text,
            parse_mode="HTML",
            disable_web_page_preview=False,
        )
    dz = tesks["dz"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–î–∑ –∑—Ä–æ–±–∏–≤!", callback_data="–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!"
                )
            ]
        ]
    )
    if "addDzPr" in tesks:
        video = FSInputFile(tesks["addDzPr"])
        await message.answer_document(
            document=video,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    videoExp = tesks["videoExp"]
    imageexp = FSInputFile(tesks["imgExp"])
    if tesks["imgExp"] == "0":
        if tesks["Cite"] == "0":
            try:
                if videoExp != "0":
                    video = FSInputFile(videoExp)
                    await message.answer_video(
                        video,
                        caption=dz,
                        disable_notification=True,
                        parse_mode="HTML",
                        reply_markup=keyboard,
                    )
                else:
                    await message.answer(
                        dz,
                        parse_mode="HTML",
                        reply_markup=keyboard,
                    )
            except TelegramBadRequest as e:
                if "caption is too long" in str(e):
                    await message.answer(
                        dz,
                        parse_mode="HTML",
                    )
                    await message.answer_video(
                        video,
                        disable_notification=True,
                        reply_markup=keyboard,
                    )
                else:
                    raise e
        else:
            text = f"{dz}"
            await message.answer(
                text,
                disable_web_page_preview=False,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
    else:
        try:
            await message.answer_photo(
                photo=imageexp,
                caption=dz,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        except TelegramBadRequest as e:
            if "caption is too long" in str(e):
                await message.answer(
                    dz,
                    parse_mode="HTML",
                )
                await message.answer_photo(
                    photo=imageexp,
                    reply_markup=keyboard,
                )
            else:
                raise e
    if "docDz" in tesks:
        video = FSInputFile(tesks["docDz"])
        await message.answer_document(
            document=video,
            caption='<b>–ó—Ä–æ–±–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è "–¢–∞–±–ª–∏—Ü—è —Ü—ñ–Ω–Ω–æ—Å—Ç–µ–π"</b>',
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    if "docDzn" in tesks:
        await message.answer(
            text=tesks["docDzn"],
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    k = 1
    for i in tesks["test"]:
        if k == 1:
            await message.answer(text="–ü–µ—Ä–µ–≤—ñ—Ä —Å–µ–±–µ!", parse_mode="HTML")
        test = tesks["test"][f"test_{k}"]
        question = test["question"]
        correct_option_id = test["correct_index"]
        explanation = test["explanation"]
        options = []
        m = 0
        for n in test["options"]:
            options.append(test["options"][m])
            m += 1
        image = FSInputFile(test["img"])
        if str(test["img"]) != "0":
            await message.answer_photo(photo=image)
        if "music" in test:
            if test["music"] != "0":
                video = FSInputFile(test["music"])

                await message.answer_audio(
                    audio=video, caption="–ü–æ—Å–ª—É—Ö–∞–π —Ü–µ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –º—É–∑–∏–∫–∏:"
                )
        if str(explanation) == "0":
            if "imgCr" in test:
                explat.clear()
                imgCr.clear()
                explat.append(test["dop"])
                imgCr.append(test["imgCr"])
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è",
                                callback_data="explation",
                            )
                        ]
                    ]
                )
                await message.answer_poll(
                    question=question,
                    options=options,
                    is_anonymous=False,
                    type="quiz",
                    correct_option_id=correct_option_id,
                    reply_markup=keyboard,
                )
            else:
                await message.answer_poll(
                    question=question,
                    options=options,
                    is_anonymous=False,
                    type="quiz",
                    correct_option_id=correct_option_id,
                )
        else:
            await message.answer_poll(
                question=question,
                options=options,
                is_anonymous=False,
                type="quiz",
                correct_option_id=correct_option_id,
                explanation=explanation,
            )
        k += 1
    if "addDz" in tesks:
        text = tesks["addDz"]
        await message.answer(
            text,
            disable_web_page_preview=False,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    if "addDzn" in tesks:
        text = tesks["addDzn"]
        await message.answer(
            text,
            disable_web_page_preview=False,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    if "addVid" in tesks:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üé• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ",
                        url=tesks["addVid"],
                    )
                ]
            ]
        )
        text = f"–í—ñ–¥–µ–æ–ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ —Ç–∏–∂–Ω—è –Ω–∞ –º–æ–≤—ñ –°++"
        await message.answer(
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    text = "–ü–µ—Ä–µ–≤—ñ—Ä —Å–µ–±–µ!"
    if tesks["addVideo"] != "0":
        text = f'<a href="{tesks["addVideo"]}">#–î–æ–¥–∞—Ç–∫–æ–≤–µ –≤—ñ–¥–µ–æ üëá</a>'
        button_text = "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{button_text}", url=f"{video_url}")]
            ]
        )
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=False,
        )
    if int(way[1]) == 0:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —É—Ä–æ–∫", callback_data="next")]
            ]
        )
    elif int(way[1]) == 1:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —É—Ä–æ–∫", callback_data="nextsecond"
                    )
                ]
            ]
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —É—Ä–æ–∫", callback_data="nextthird"
                    )
                ]
            ]
        )
    if tesks["End"] == "0":
        num.clear()
        text = "–ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —É—Ä–æ–∫ –∑ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è üëá"
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    elif tesks["End"] == "1":
        num.clear()
        p = way[0]
        way.clear()
        way.append(p)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="nextweek"
                    )
                ]
            ]
        )
        text = "–¶–µ –±—É–≤ –æ—Å—Ç–∞–Ω—ñ–π —É—Ä–æ–∫ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è! –ü—Ä–æ–¥–æ–≤–∂—É–π —à–ª—è—Ö!"
        await message.answer(text)
        text = "–ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–∏–∂–¥–µ–Ω—å üëá"
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    else:
        text = (
            "–¶–µ –±—É–≤ –æ—Å—Ç–∞–Ω—ñ–π —É—Ä–æ–∫ —Ü—å–æ–≥–æ –º–∞—Ä–∞—Ñ–æ–Ω—É! –ú–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –º–∞—Ä–∞—Ñ–æ–Ω –∞–±–æ –∫—É—Ä—Å."
        )
        await message.answer(text)
        num.clear()
        way.clear()
