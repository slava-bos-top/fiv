from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.filters.command import CommandObject
from aiogram.types import (
    Message,
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
    MenuButtonCommands,
    MenuButtonDefault,
    BotCommandScopeDefault,
    BotCommandScopeChat,
    BotCommand,
)
from aiogram import Router, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest
import json

import sys
import base64
import requests

import gspread
from oauth2client.service_account import ServiceAccountCredentials

from app.storage import user_phone_map

with open("lessons.json", "r", encoding="utf-8") as f:
    LESSONS = json.load(f)

router = Router()

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
from config import Config
from main import bot


class UserProgress(StatesGroup):
    ends = State()
    go = State()
    way = State()
    kof = State()
    les = State()
    num = State()
    explat = State()
    imgCr = State()
    marafonskey0 = State()
    wek0 = State()
    wek1 = State()
    wek2 = State()
    wek3 = State()
    wek4 = State()
    leson0 = State()
    lesonForWeekSecond0 = State()
    lesonForWeekThird0 = State()
    leson1 = State()
    lesonForWeekSecond1 = State()
    lesonForWeekThird1 = State()
    leson2 = State()
    lesonForWeekSecond2 = State()
    lesonForWeekThird2 = State()
    leson3 = State()
    lesonForWeekSecond3 = State()
    lesonForWeekThird3 = State()
    leson4 = State()
    num = State()
    first_name = State()
    last_name = State()
    numbers = State()
    SignInSuper = State()


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö—É—Ä—Å–∏")],
        [KeyboardButton(text="–ú–∞—Ä–∞—Ñ–æ–Ω–∏")],
        [KeyboardButton(text="–ü—Ä–æ –Ω–∞—Å")],
    ],
    resize_keyboard=True,
)


list_for_exsel_lesson = [[0, 7, 13], [19, 25, 31], [37, 44, 51], [56, 62, 68], [74]]

marafons = [
    "–§—ñ–∑–∏–∫–∞",
    "–•—ñ–º—ñ—è",
    "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å",
    "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
    "–ù–æ–≤–æ—Ä—ñ—á–Ω–∏–π",
    "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
]
weeks = ["–¢–∏–∂–¥–µ–Ω—å 1", "–¢–∏–∂–¥–µ–Ω—å 2", "–¢–∏–∂–¥–µ–Ω—å 3"]
lessons = ["–£—Ä–æ–∫ 1", "–£—Ä–æ–∫ 2", "–£—Ä–æ–∫ 3", "–£—Ä–æ–∫ 4", "–£—Ä–æ–∫ 5", "–£—Ä–æ–∫ 6", "–£—Ä–æ–∫ 7"]


# callback
@router.callback_query(F.data == "Done")
async def homework_done_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü—Ä–æ–≥—Ä–µ—Å –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è...")
    data = await state.get_data()
    les = data.get("les", [])

    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    # creds = ServiceAccountCredentials.from_json_keyfile_name("cred.json", scope)
    cred_json_str = Config.GOOGLE_CREDENTIALS

    cred_dict = json.loads(cred_json_str)
    cred_dict["private_key"] = cred_dict["private_key"].replace("\\n", "\n")
    creds = ServiceAccountCredentials.from_json_keyfile_dict(cred_dict, scope)
    client = gspread.authorize(creds)

    sheet = client.open_by_url(
        "https://docs.google.com/spreadsheets/d/17lcrlxUhcervwQTOctLZkdvBVpAwyuWu7DQQ3d_oVSQ/edit?usp=sharing"
    ).sheet1

    phone_column = sheet.col_values(4)
    number_to_find = user_phone_map.get(callback.from_user.id)

    try:
        row_index = phone_column.index(number_to_find) + 1
        row_values = sheet.row_values(row_index)

        current_module = sys.modules[__name__]

        if les[1] == 0:
            leson_list_name = f"leson{les[0]}"
            lesson_keyboard_name = f"lesson{les[0]}"
        elif les[1] == 1:
            leson_list_name = f"lesonForWeekSecond{les[0]}"
            lesson_keyboard_name = f"lessonForWeekSecond{les[0]}"
        else:
            leson_list_name = f"lesonForWeekThird{les[0]}"
            lesson_keyboard_name = f"lessonForWeekThird{les[0]}"

        # leson_list = getattr(current_module, leson_list_name)
        data = await state.get_data()
        inf = data.get(leson_list_name, [])

        if "‚úÖ" in inf[les[2]]:
            # leson_list[les[2]] = f"{leson_list[les[2]]}"
            await callback.message.answer("–¶–µ–π —É—Ä–æ–∫ –≤–∂–µ –±—É–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ")
        else:
            # leson_list[les[2]] = f"{leson_list[les[2]]} ‚úÖ"
            row_values[25 + list_for_exsel_lesson[les[0]][les[1]] + les[2]] = 1

            sheet.update(f"A{row_index}", [row_values])

            data = await state.get_data()
            l = data.get(leson_list_name, [])
            l[les[2]] = f"{l[les[2]]} ‚úÖ"
            await state.update_data(**{leson_list_name: l})
        data = await state.get_data()
        leson_list = data.get(leson_list_name, [])

        lessonKeyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=lesson)] for lesson in leson_list],
            resize_keyboard=True,
        )

        g = 1
        for i in leson_list:
            if i[-1:] == "‚úÖ":
                g += 1
        week_list = []
        if int(len(leson_list)) == g:
            wek_list_name = f"wek{les[0]}"
            # week_keyboard_name = f"week{les[0]}"

            data = await state.get_data()
            inf = data.get(wek_list_name, [])

            # week_list = getattr(current_module, wek_list_name)
            if "‚úÖ" in inf[les[1]]:
                # week_list[les[1]] = f"{week_list[les[1]]}"
                pass
            else:
                # week_list[les[1]] = f"{week_list[les[1]]} ‚úÖ"
                data = await state.get_data()
                l = data.get(wek_list_name, [])
                l[les[1]] = f"{l[les[1]]} ‚úÖ"
                await state.update_data(**{wek_list_name: l})
            data = await state.get_data()
            week_list = data.get(wek_list_name, [])

            # setattr(
            #     current_module,
            #     week_keyboard_name,
            #     ReplyKeyboardMarkup(
            #         keyboard=[[KeyboardButton(text=week)] for week in week_list],
            #         resize_keyboard=True,
            #     ),
            # )
            row_values[12 + les[0] * 3 + les[1]] = g

            sheet.update(f"A{row_index}", [row_values])
        j = 1
        if int(len(week_list)) == 0:
            pass
        else:
            for i in week_list:
                if i[-1:] == "‚úÖ":
                    j += 1
            if int(len(week_list)) == j:
                mar = "marafonskey0"
                # mar_keyboard_name = "marafonskey"

                # mar_list = getattr(current_module, mar)

                data = await state.get_data()
                inf = data.get(mar, [])

                if "‚úÖ" in inf[les[0]]:
                    # mar_list[les[0]] = f"{mar_list[les[0]]}"
                    pass
                else:
                    # mar_list[les[0]] = f"{mar_list[les[0]]} ‚úÖ"
                    data = await state.get_data()
                    l = data.get(mar, [])
                    l[les[0]] = f"{l[les[0]]} ‚úÖ"
                    await state.update_data(**{mar: l})

                # setattr(
                #     current_module,
                #     mar_keyboard_name,
                #     ReplyKeyboardMarkup(
                #         keyboard=[[KeyboardButton(text=mar)] for mar in mar_list],
                #         resize_keyboard=True,
                #     ),
                # )
                row_values[7 + les[0]] = j

                sheet.update(f"A{row_index}", [row_values])
        data = await state.get_data()
        ends = data.get("ends", [])
        if ends == 0:
            text = (
                "–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! –û–±–∏—Ä–∞–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫! –î–∞–ª—ñ - —â–µ —Ü—ñ–∫–∞–≤—ñ—à–µ! üôå"
            )
        elif ends == 1:
            text = "–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! –û–±–∏—Ä–∞–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å! –î–∞–ª—ñ - —â–µ —Ü—ñ–∫–∞–≤—ñ—à–µ! üôå"
        else:
            text = "–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! –û–±–∏—Ä–∞–π —ñ–Ω—à–∏–π –º–∞—Ä–∞—Ñ–æ–Ω –∞–±–æ –∫—É—Ä—Å! –î–∞–ª—ñ - —â–µ —Ü—ñ–∫–∞–≤—ñ—à–µ! üôå"
        await callback.message.answer(text=text, reply_markup=lessonKeyboard)
    except ValueError as v:
        if "None is not in list" in str(v):
            await callback.message.answer(
                "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å, —Ç—Ä–µ–±–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –∞–±–æ —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç",
                reply_markup=kb.regestration,
            )


@router.callback_query(F.data == "comfirmsignIn")
async def homework_done_callbacks(callback: CallbackQuery):
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    cred_json_str = Config.GOOGLE_CREDENTIALS

    cred_dict = json.loads(cred_json_str)
    cred_dict["private_key"] = cred_dict["private_key"].replace("\\n", "\n")
    creds = ServiceAccountCredentials.from_json_keyfile_dict(cred_dict, scope)
    client = gspread.authorize(creds)

    sheet = client.open_by_url(
        "https://docs.google.com/spreadsheets/d/17lcrlxUhcervwQTOctLZkdvBVpAwyuWu7DQQ3d_oVSQ/edit?usp=sharing"
    ).sheet1

    phone_column = sheet.col_values(4)
    number_to_find = user_phone_map.get(callback.from_user.id)

    row_index = phone_column.index(number_to_find) + 1
    row_values = sheet.row_values(row_index)

    row_values[5] = 1

    sheet.update(f"A{row_index}", [row_values])
    await callback.message.answer("–í—Ö—ñ–¥ –ø—ñ—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")


@router.callback_query(F.data == "–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!")
async def homework_done_callback(callback: CallbackQuery):
    await callback.answer("–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! ‚úÖ", show_alert=True)


@router.callback_query(F.data == "explation")
async def homework_done_callbacktask(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    explat = data.get("explat", [])
    imgCr = data.get("imgCr", [])
    image = FSInputFile(imgCr[0])
    await callback.message.answer_photo(
        caption=f"{explat[0]}", photo=image, parse_mode="HTML"
    )


@router.message(CommandStart(deep_link=True))
async def start_handler(message: Message, state: FSMContext, command: CommandObject):
    chat_id = message.chat.id
    user = message.from_user

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º º—è/–ø—Ä—ñ–∑–≤–∏—â–µ
    await state.update_data(first_name=[user.first_name])
    await state.update_data(last_name=[user.last_name])

    # –û—Ç—Ä–∏–º—É—î–º–æ deep link –ø–∞—Ä–∞–º–µ—Ç—Ä
    param = command.args  # –¶–µ –±—É–¥–µ 'confirm_380501234567' –∞–±–æ None

    if param and param.startswith("confirm_"):
        phone = param.replace("confirm_", "")
        await state.set_state(UserProgress.numbers)
        await state.update_data(num=[phone])

        await message.answer(
            "üëã –í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º, –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞.",
            reply_markup=kb.get_number,
        )
        print(f"‚úÖ Deep link –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {phone}")
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ª–æ–≥—ñ–∫–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é")


from cloudinary import uploader, config as cloudinary_config


@router.message(StateFilter(UserProgress.numbers), F.contact)
async def register_city(message: Message, state: FSMContext):
    await message.answer("–î–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è...", reply_markup=ReplyKeyboardRemove())
    await state.update_data(numbers=message.contact)
    data = await state.get_data()
    number = list(data["numbers"])[0][1]

    # üîê Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    cred_json_str = Config.GOOGLE_CREDENTIALS
    cred_dict = json.loads(cred_json_str)
    cred_dict["private_key"] = cred_dict["private_key"].replace("\\n", "\n")
    creds = ServiceAccountCredentials.from_json_keyfile_dict(cred_dict, scope)
    client = gspread.authorize(creds)
    spreadsheet = client.open_by_url(
        "https://docs.google.com/spreadsheets/d/17lcrlxUhcervwQTOctLZkdvBVpAwyuWu7DQQ3d_oVSQ/edit?usp=sharing"
    )
    sheet = spreadsheet.sheet1

    # üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Cloudinary
    cloudinary_config(
        cloud_name=Config.CLOUDINARY_CLOUD_NAME,
        api_key=Config.CLOUDINARY_API_KEY,
        api_secret=Config.CLOUDINARY_API_SECRET,
    )

    user_id = message.from_user.id
    photo_url = "0"  # –∑–∞–ø–∞—Å–Ω–µ —Ñ–æ—Ç–æ

    try:
        photos = await bot.get_user_profile_photos(user_id, limit=1)
        if photos.total_count > 0:
            photo = photos.photos[0][-1]
            file = await bot.get_file(photo.file_id)
            file_path = file.file_path
            tg_file_url = (
                f"https://api.telegram.org/file/bot{Config.BOT_TOKEN}/{file_path}"
            )
            response = requests.get(tg_file_url)

            cloudinary_response = uploader.upload(response.content)
            photo_url = cloudinary_response.get("secure_url", photo_url)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ:", e)

    # üß† –î–∞–ª—ñ –ª–æ–≥—ñ–∫–∞ –∑–≤—ñ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞
    number = number.replace("(", "").replace(")", "").replace(" ", "").replace("+", "")
    num = data.get("num", [])[0]
    first_name = data.get("first_name", [""])[0]
    last_name = data.get("last_name", [""])[0]

    if number == str(num):
        ena = 0
        phone = number
        user_phone_map[user_id] = phone
        conf = "Confirmed"
        user_data = [
            conf,
            first_name,
            last_name,
            num,
            user_id,
            ena,
            photo_url,
        ]
        user_data += [0] * 99
        sheet.append_row(user_data)
        await message.answer(
            "–ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í—ñ—Ç–∞—î–º–æ –≤ –∫–ª—É–±—ñ —Ä–æ–∑—É–º–Ω–∏–∫—ñ–≤ —Ç–∞ —Ä–æ–∑—É–º–Ω–∏—Ü—å! üòâ"
        )
        await bot.set_my_commands(
            [BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é")],
            scope=BotCommandScopeChat(chat_id=message.chat.id),
        )
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç! –í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –≤ –±–æ—Ç—ñ FivOne. –¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –∫—É—Ä—Å–∏ —Ç–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∏, —è–∫—ñ —Å—Ç–≤–æ—Ä–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —ñ —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ –æ–ø–∞–Ω—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è –ª–µ–≥–∫–æ, —Ü—ñ–∫–∞–≤–æ —Ç–∞ –≤–µ—Å–µ–ª–æ!",
            reply_markup=main,
        )
        await message.answer(
            "–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é (–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ - —Ç—Ä–∏ —Ä–∏—Å–æ—á–∫–∏ –≤–Ω–∏–∑—É –∑–ª—ñ–≤–∞). –¶—è –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ —Ç–µ–±–µ –¥–æ –ì–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–∏—Ä–∞–π –º–∞—Ä–∞—Ñ–æ–Ω —á–∏ –∫—É—Ä—Å, —è–∫–∏–π —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏–≤, –æ–∑–Ω–∞–π–æ–º–ª—é–π—Å—è –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ —É—Ä–æ–∫—É, –≤–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –¥–∏–≤—É–π —Å–≤–æ—ó–º–∏ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞–Ω–Ω—è–º–∏ –æ—Ç–æ—á—É—é—á–∏—Ö! –ó–∞–ø—Ä–æ—à—É–π –¥—Ä—É–∑—ñ–≤ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è, –∞–¥–∂–µ —Ä–∞–∑–æ–º –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è —â–æ—Å—å –Ω–æ–≤–µ –∑–∞–≤–∂–¥–∏ —Ü—ñ–∫–∞–≤—ñ—à–µ! –ü–æ—á–∏–Ω–∞–π–º–æ! \nüëá",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()
    else:
        await message.answer("–ù–æ–º–µ—Ä –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –≤–∫–∞–∑–∞–Ω–∏–º –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        await state.clear()


@router.message(Command("start"))
async def regular_start_handler(message: Message, state: FSMContext):
    await bot.set_my_commands(
        [
            BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"),
        ],
        scope=BotCommandScopeChat(chat_id=message.chat.id),
    )
    await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç! –í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –≤ –±–æ—Ç—ñ FivOne. –¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –∫—É—Ä—Å–∏ —Ç–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∏, —è–∫—ñ —Å—Ç–≤–æ—Ä–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ —ñ —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ –æ–ø–∞–Ω—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è –ª–µ–≥–∫–æ, —Ü—ñ–∫–∞–≤–æ —Ç–∞ –≤–µ—Å–µ–ª–æ!",
            reply_markup=main,
        )
    await message.answer(
        "–ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é (–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ - —Ç—Ä–∏ —Ä–∏—Å–æ—á–∫–∏ –≤–Ω–∏–∑—É –∑–ª—ñ–≤–∞). –¶—è –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ —Ç–µ–±–µ –¥–æ –ì–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±–∏—Ä–∞–π –º–∞—Ä–∞—Ñ–æ–Ω —á–∏ –∫—É—Ä—Å, —è–∫–∏–π —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏–≤, –æ–∑–Ω–∞–π–æ–º–ª—é–π—Å—è –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ —É—Ä–æ–∫—É, –≤–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –¥–∏–≤—É–π —Å–≤–æ—ó–º–∏ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞–Ω–Ω—è–º–∏ –æ—Ç–æ—á—É—é—á–∏—Ö! –ó–∞–ø—Ä–æ—à—É–π –¥—Ä—É–∑—ñ–≤ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è, –∞–¥–∂–µ —Ä–∞–∑–æ–º –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è —â–æ—Å—å –Ω–æ–≤–µ –∑–∞–≤–∂–¥–∏ —Ü—ñ–∫–∞–≤—ñ—à–µ! –ü–æ—á–∏–Ω–∞–π–º–æ! \nüëá",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(Command("menu"))
async def start(message: Message, state: FSMContext):
    data = await state.get_data()
    go = data.get("go", [])
    if go != True:
        await state.update_data(
            ends=0,
            go=True,
            kof=[0],
            les=[],
            num=[],
            way=[],
            explat=[],
            imgCr=[],
            marafonskey0=[
                "–§—ñ–∑–∏–∫–∞",
                "–•—ñ–º—ñ—è",
                "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å",
                "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
                "–ù–æ–≤–æ—Ä—ñ—á–Ω–∏–π",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
            ],
            wek0=[
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ñ—ñ–∑–∏–∫–∏. –¢–∏–∂–¥–µ–Ω—å 1",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ñ—ñ–∑–∏–∫–∏. –¢–∏–∂–¥–µ–Ω—å 2",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ñ—ñ–∑–∏–∫–∏. –¢–∏–∂–¥–µ–Ω—å 3",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–∞—Ä–∞—Ñ–æ–Ω—ñ–≤",
            ],
            wek1=[
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ö—ñ–º—ñ—ó. –¢–∏–∂–¥–µ–Ω—å 1",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ö—ñ–º—ñ—ó. –¢–∏–∂–¥–µ–Ω—å 2",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ö—ñ–º—ñ—ó. –¢–∏–∂–¥–µ–Ω—å 3",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–∞—Ä–∞—Ñ–æ–Ω—ñ–≤",
            ],
            wek2=[
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –¢–∏–∂–¥–µ–Ω—å 1",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –¢–∏–∂–¥–µ–Ω—å 2",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –¢–∏–∂–¥–µ–Ω—å 3",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–∞—Ä–∞—Ñ–æ–Ω—ñ–≤",
            ],
            wek3=[
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ IT. –¢–∏–∂–¥–µ–Ω—å 1",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ IT. –¢–∏–∂–¥–µ–Ω—å 2",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ IT. –¢–∏–∂–¥–µ–Ω—å 3",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–∞—Ä–∞—Ñ–æ–Ω—ñ–≤",
            ],
            wek4=["–ù–∞–≤–æ—Ä—ñ—á–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω. –¢–∏–∂–¥–µ–Ω—å 1", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–∞—Ä–∞—Ñ–æ–Ω—ñ–≤"],
            leson0=[
                "–£—Ä–æ–∫ 1. –°–∏–ª–∞ –í—Å–µ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ç—è–∂–Ω—ñ–Ω–Ω—è. –ù–µ–≤–∞–≥–æ–º—ñ—Å—Ç—å",
                "–£—Ä–æ–∫ 2. –í—ñ–ª—å–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è. –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –≤—ñ–ª—å–Ω–æ–≥–æ –ø–∞–¥—ñ–Ω–Ω—è",
                "–£—Ä–æ–∫ 3. –¶–µ–Ω—Ç—Ä –º–∞—Å",
                "–£—Ä–æ–∫ 4. –ü—Ä–æ—Å—Ç—ñ –º–µ—Ö–∞–Ω—ñ–∑–º–∏",
                "–£—Ä–æ–∫ 5. –ü—Ä—É–∂–Ω—ñ—Å—Ç—å",
                "–£—Ä–æ–∫ 6. –¢–µ—Ä—Ç—è",
                '–£—Ä–æ–∫ 7. –î–æ–¥–∞—Ç–∫–æ–≤–µ –≤—ñ–¥–µ–æ "–ß–æ–º—É –Ω–µ–±–æ –±–ª–∞–∫–∏—Ç–Ω–µ?"',
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            lesonForWeekSecond0=[
                "–£—Ä–æ–∫ 1. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                "–£—Ä–æ–∫ 2. –ï–Ω–µ—Ä–≥—ñ—è",
                "–£—Ä–æ–∫ 3. –î–≤–∏–≥—É–Ω–∏",
                "–£—Ä–æ–∫ 4. –ì—É—Å—Ç–∏–Ω–∞",
                "–£—Ä–æ–∫ 5. –¢–∏—Å–∫",
                "–£—Ä–æ–∫ 6. –ì–æ—Ä—ñ–Ω–Ω—è",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            lesonForWeekThird0=[
                "–£—Ä–æ–∫ 1. –ï–ª–µ–∫—Ç—Ä–∏–∫–∞",
                "–£—Ä–æ–∫ 2. –õ–∞–º–ø–æ—á–∫–∞",
                "–£—Ä–æ–∫ 3. –ú–∞–≥–Ω—ñ—Ç–∏",
                "–£—Ä–æ–∫ 4. –û–ø—Ç–∏–∫–∞",
                "–£—Ä–æ–∫ 5. –ó–≤'—è–∑–æ–∫",
                "–£—Ä–æ–∫ 6. –ê—Å—Ç—Ä–æ—Ñ—ñ–∑–∏–∫–∞",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            leson1=[
                "–£—Ä–æ–∫ 1. –Ø–≤–∏—â–∞ –Ω–∞–≤–∫–æ–ª–æ –Ω–∞—Å",
                "–£—Ä–æ–∫ 2. –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ú–µ–Ω–¥–µ–ª—î—î–≤–∞",
                "–£—Ä–æ–∫ 3. –†–µ—á–æ–≤–∏–Ω–∏ —Ç–∞ —ó—Ö–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ",
                "–£—Ä–æ–∫ 4. –ê—Ç–æ–º–∏, –º–æ–ª–µ–∫—É–ª–∏, –π–æ–Ω–∏. –ú–∞—Å–∞",
                "–£—Ä–æ–∫ 5. –†–µ—á–æ–≤–∏–Ω–∏ (—á–∞—Å—Ç–∏–Ω–∞ 2)",
                "–£—Ä–æ–∫ 6. –°—É–º—ñ—à—ñ —Ç–∞ —ó—Ö–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            lesonForWeekSecond1=[
                "–£—Ä–æ–∫ 1. –°—É–º—ñ—à—ñ (—á–∞—Å—Ç–∏–Ω–∞ 2)",
                "–£—Ä–æ–∫ 2. –ü—Ä–æ—Å—Ç—ñ —Ç–∞ —Å–∫–ª–∞–¥–Ω—ñ —Ä–µ—á–æ–≤–∏–Ω–∏",
                "–£—Ä–æ–∫ 3. –í–∞–ª–µ–Ω—Ç–Ω—ñ—Å—Ç—å. –§–æ—Ä–º—É–ª–∏ —Ä–µ—á–æ–≤–∏–Ω",
                "–£—Ä–æ–∫ 4. –ó–∞–∫–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞—Å–∏",
                "–£—Ä–æ–∫ 5. –û—Ä–≥–∞–Ω—ñ—á–Ω—ñ —Ä–µ—á–æ–≤–∏–Ω–∏",
                "–£—Ä–æ–∫ 6. –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            lesonForWeekThird1=[
                "–£—Ä–æ–∫ 1. –û–∫—Å–∏–¥–∏ (–ù–µ–æ—Ä–≥–∞–Ω—ñ—á–Ω—ñ —Ä–µ—á–æ–≤–∏–Ω–∏)",
                "–£—Ä–æ–∫ 2. –ö–∏—Å–ª–æ—Ç–∏ (–ù–µ–æ—Ä–≥–∞–Ω—ñ—á–Ω—ñ —Ä–µ—á–æ–≤–∏–Ω–∏)",
                "–£—Ä–æ–∫ 3. –û—Å–Ω–æ–≤–∏. –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏",
                "–£—Ä–æ–∫ 4. –°–æ–ª—ñ",
                "–£—Ä–æ–∫ 5. –ß–æ–º—É —Ä–µ—á–æ–≤–∏–Ω–∏ –º–∞—é—Ç—å —Ä—ñ–∑–Ω–∏–π –∫–æ–ª—ñ—Ä?",
                "–£—Ä–æ–∫ 6. –ü—ñ–¥—Å—É–º–æ–∫ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ —Ö—ñ–º—ñ—ó",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            leson2=[
                "–£—Ä–æ–∫ 1. –©–æ —Ç–∞–∫–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å?",
                "–£—Ä–æ–∫ 2. –Ø–∫ —à—É–∫–∞—Ç–∏ –Ω–æ–≤—ñ —ñ–¥–µ—ó?",
                "–£—Ä–æ–∫ 3. –ß–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ñ–∞–Ω—Ç–∞–∑—É–≤–∞—Ç–∏?",
                "–£—Ä–æ–∫ 4. –ß–∏ –ø–æ—î–¥–Ω—É—é—Ç—å—Å—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ —Ä–æ–∑—É–º?",
                "–£—Ä–æ–∫ 5. –Ø–∫—ñ —Ä–∏—Å–∏ –º–∞—é—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ –ª—é–¥–∏?",
                "–£—Ä–æ–∫ 6. –§–∞–Ω—Ç–∞–∑—ñ–π–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä",
                "–£—Ä–æ–∫ 7. –û—Å–Ω–æ–≤–∏ –¥–∏–∑–∞–π–Ω—É. –†–µ—Å—É—Ä—Å–∏",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            lesonForWeekSecond2=[
                "–£—Ä–æ–∫ 1. –©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –Ω–µ–º–∞—î —ñ–¥–µ–π?",
                "–£—Ä–æ–∫ 2. –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ —Ç–∞ –¢–≤–æ—Ä—á—ñ—Å—Ç—å",
                "–£—Ä–æ–∫ 3. –ú—É–∑–∏–∫–∞ —Ç–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å",
                "–£—Ä–æ–∫ 4. –Ø–∫ —Ç–µ–∞—Ç—Ä —Ä–æ–∑–≤–∏–≤–∞—î –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å?",
                "–£—Ä–æ–∫ 5. –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ —ñ–Ω—à–∏—Ö –≤–∏–¥–∞—Ö –º–∏—Å—Ç–µ—Ü—Ç–≤–∞",
                "–£—Ä–æ–∫ 6. –®—É–∫–∞—î–º–æ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ –Ω–∞—Å",
                "–£—Ä–æ–∫ 7. –°—É—á–∞—Å–Ω–∏–π –¥–∏–∑–∞–π–Ω. –ü—Ä–∏–∫–ª–∞–¥–∏",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            lesonForWeekThird2=[
                "–£—Ä–æ–∫ 1. –ú—Ä—ñ—ó —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó",
                "–£—Ä–æ–∫ 2. –¶—ñ–Ω–Ω–æ—Å—Ç—ñ —Ç–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å",
                "–£—Ä–æ–∫ 3. –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å —è–∫ —á–∞—Å—Ç–∏–Ω–∞ –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–∞",
                "–£—Ä–æ–∫ 4. –ö–æ–º–∞–Ω–¥–Ω–∞ —Ä–æ–±–æ—Ç–∞ —É –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ–π —Å—Ñ–µ—Ä—ñ",
                "–£—Ä–æ–∫ 5. 10 –∫—Ä–æ–∫—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            leson3=[
                "–£—Ä–æ–∫ 1. –í—Å—Ç—É–ø –¥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
                "–£—Ä–æ–∫ 2. –ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π",
                "–£—Ä–æ–∫ 3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º",
                "–£—Ä–æ–∫ 4. –°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –î—ñ–∞–ª–æ–≥",
                "–£—Ä–æ–∫ 5. –î–æ–¥–∞—î–º–æ —É–º–æ–≤–∏ –≤ –∫–æ–¥",
                "–£—Ä–æ–∫ 6. –ú–æ—Ç–∏–≤–∞—Ü—ñ—è",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            lesonForWeekSecond3=[
                "–£—Ä–æ–∫ 1. –û—Å–Ω–æ–≤–∏ –°++. –ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞",
                "–£—Ä–æ–∫ 2. –£–º–æ–≤–∏ –≤ –º–æ–≤—ñ –°++",
                "–£—Ä–æ–∫ 3. –ê–ª–≥–æ—Ä–∏—Ç–º–∏ —É –°++",
                "–£—Ä–æ–∫ 4. –¶–∏–∫–ª–∏ —É –º–æ–≤—ñ –°++",
                "–£—Ä–æ–∫ 5. –§—É–Ω–∫—Ü—ñ—ó. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫",
                "–£—Ä–æ–∫ 6. –ú–æ—Ç–∏–≤–∞—Ü—ñ—è",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            lesonForWeekThird3=[
                "–£—Ä–æ–∫ 1. –û—Å–Ω–æ–≤–∏ –º–æ–≤–∏ Python",
                "–£—Ä–æ–∫ 2. –¶–∏–∫–ª–∏ —É –º–æ–≤—ñ Python",
                "–£—Ä–æ–∫ 3. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫ —É –º–æ–≤—ñ Python",
                "–£—Ä–æ–∫ 4. –†—è–¥–∫–∏ —É –º–æ–≤—ñ Python",
                "–£—Ä–æ–∫ 5. –û—Å–Ω–æ–≤–∏ JavaScript (–ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —ñ–Ω—Ç–µ–Ω—Å–∏–≤—É)",
                "–£—Ä–æ–∫ 6. –Ü–Ω—Ç–µ–Ω—Å–∏–≤ JavaScript",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
            leson4=[
                "–£—Ä–æ–∫ 1. –Ü–≥—Ä–∞—à–∫–∞ –∑ –ø—Ä–∏—Ä–æ–¥–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤",
                "–£—Ä–æ–∫ 2. –Ü–≥—Ä–∞—à–∫–∞ –≤ —Ç–µ—Ö–Ω—ñ—Ü—ñ –∫–∞–Ω–∑–∞—à–∏",
                "–£—Ä–æ–∫ 3. –ù–æ–≤–æ—Ä—ñ—á–Ω–∞ —ñ–≥—Ä–∞—à–∫–∞ –∑ —Å–æ–ª–æ–Ω–æ–≥–æ —Ç—ñ—Å—Ç–∞",
                "–£—Ä–æ–∫ 4. –Ü–≥—Ä–∞—à–∫–∞ –∑ —Ñ–µ—Ç—Ä—É",
                "–£—Ä–æ–∫ 5. –ö–≤—ñ–ª—ñ–Ω–≥",
                "–£—Ä–æ–∫ 6. –¢—Ä–∏ —ñ–≥—Ä–∞—à–∫–∏ –∑ —Ñ–æ–∞–º—ñ—Ä–∞–Ω—É",
                "–£—Ä–æ–∫ 7. –Ü–≥—Ä–∞—à–∫–∞ —É —Ç–µ—Ö–Ω—ñ—Ü—ñ –¥–µ–∫—É–ø–∞–∂",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ],
        )
    await message.answer("–û–±–∏—Ä–∞–π—Ç–µ –º–∞—Ä–∞—Ñ–æ–Ω —á–∏ –∫—É—Ä—Å", reply_markup=main)


@router.message(F.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
async def start(message: Message):
    await message.answer("–û–±–∏—Ä–∞–π—Ç–µ –º–∞—Ä–∞—Ñ–æ–Ω —á–∏ –∫—É—Ä—Å", reply_markup=main)


@router.message(F.text.in_(["–ú–∞—Ä–∞—Ñ–æ–Ω–∏", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–∞—Ä–∞—Ñ–æ–Ω—ñ–≤"]))
async def Task(message: Message, state: FSMContext):
    await state.update_data(num=[])
    await state.update_data(way=[])
    data = await state.get_data()
    marafonskey = data.get("marafonskey0", [])
    lessonKeyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=lesson)] for lesson in marafonskey],
        resize_keyboard=True,
    )
    await message.answer(
        "–û–±–∏—Ä–∞–π, –±—É–¥—å –ª–∞—Å–∫–∞, –º–∞—Ä–∞—Ñ–æ–Ω, —è–∫–∏–π —Ç–µ–±–µ –∑–∞—Ü—ñ–∫–∞–≤–∏–≤", reply_markup=lessonKeyboard
    )


@router.message(
    F.text.startswith(
        tuple(
            [
                "–§—ñ–∑–∏–∫–∞",
                "–•—ñ–º—ñ—è",
                "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å",
                "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
                "–ù–æ–≤–æ—Ä—ñ—á–Ω–∏–π",
                "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏–∂–Ω—ñ–≤",
            ]
        )
    )
)
async def Marafons(message: Message, state: FSMContext):
    if "‚úÖ" in message.text:
        mes = message.text[:-2]
    else:
        mes = message.text
    for i in marafons:
        if i == str(mes):
            index = marafons.index(i)
    data = await state.get_data()
    way = data.get("way", [])
    way.append(index)
    await state.update_data(way=way)
    if index == 0:
        await message.answer(
            "<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! </b>üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –ú–∞—Ä–∞—Ñ–æ–Ω—ñ –∑ —Ñ—ñ–∑–∏–∫–∏.\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –í –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –±—É–¥–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è - –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑ –ø–µ–≤–Ω–æ—ó —Ç–µ–º–∏ —Ñ—ñ–∑–∏–∫–∏. –¢–∞–∫–æ–∂ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –ª–µ–∫—Ü—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ.\n\n–ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ —É—Ä–æ–∫—É —Ç—É—Ç –∑'—è–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º —É—Ä–æ–∫—É ‚ö°Ô∏è\n\n–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å. \n\n–û—Ç–∂–µ, <b>3-2-1 –ø–æ–ª–µ–µ–µ–µ—Ç—ñ–ª–∏</b> üöÄ",
            parse_mode="HTML",
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–ª—ñ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤",
                        url="https://docs.google.com/document/d/1ldW3nXfz78LBNLe6Lm6owQyTzYpK1RdybqvZve3JeuY/edit?usp=drivesdk",
                    )
                ]
            ]
        )
        await message.answer(
            text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤, –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º üëá",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    elif index == 1:
        await message.answer(
            "<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! </b>üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –ú–∞—Ä–∞—Ñ–æ–Ω—ñ –∑ —Ö—ñ–º—ñ—ó.\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –í –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –±—É–¥–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è - –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∞–±–æ —Å–∏–º—É–ª—è—Ü—ñ—è –∑ –ø–µ–≤–Ω–æ—ó —Ç–µ–º–∏ —Ö—ñ–º—ñ—ó. –¢–∞–∫–æ–∂ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à —Ç–µ–∫—Å—Ç–æ–≤—É –≤–µ—Ä—Å—ñ—é –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É.\n\n–ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ —É—Ä–æ–∫—É —Ç—É—Ç –∑'—è–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º —É—Ä–æ–∫—É ‚ö°Ô∏è\n\n–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å. \n\n–û—Ç–∂–µ, <b>3-2-1 –ø–æ–ª–µ–µ–µ–µ—Ç—ñ–ª–∏ </b>üöÄ",
            parse_mode="HTML",
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–ª—ñ–∫ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤",
                        url="https://docs.google.com/document/d/1lTgqZk1gTo1tA3iQwMdrlxuustXzRJFW0C9LBmd4Hec/edit?usp=drivesdk",
                    )
                ]
            ]
        )
        await message.answer(
            text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤ üëá",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    elif index == 2:
        await message.answer(
            "<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç!</b> üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –ú–∞—Ä–∞—Ñ–æ–Ω—ñ –∑ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ.\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –í –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –±—É–¥–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è - –Ω–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. \n\n–¢–∞–∫–æ–∂ –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ–≥–æ —É—Ä–æ–∫—É —Ç—É—Ç –∑'—è–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º —É—Ä–æ–∫—É ‚ö°Ô∏è\n\n–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å.  \n\n–û—Ç–∂–µ, <b>3-2-1 –ø–æ—á–∏–Ω–∞—î–º–æ –º–∏—Å–ª–∏—Ç–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ</b> ‚òÄÔ∏è",
            parse_mode="HTML",
        )
    elif index == 3:
        await message.answer(
            "<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! </b>üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –Ü–¢ –º–∞—Ä–∞—Ñ–æ–Ω—ñ.\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –ú–∞—Ä–∞—Ñ–æ–Ω —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –Ω–∞ —Ç—Ä–∏ —Ç–∏–∂–Ω—ñ. –ù–µ–¥—ñ–ª—è - –≤–∏—Ö—ñ–¥–Ω–∏–πüòâ\n\n<b>–í–∞–∂–ª–∏–≤–æ:</b>\n1. –ñ–æ–≤—Ç—ñ —Å–ª–∞–π–¥–∏ —É –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—è—Ö —Ç–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è—Ö - —Ü–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∞–±–æ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –û—Å–Ω–æ–≤–Ω–µ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑'—è–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º —Ç—É—Ç –≤ –∫–∞–Ω–∞–ª—ñ.\n\n2. –ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –ø–µ—Ä—à–æ–≥–æ —Ç–∏–∂–Ω—è —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à —Ç–µ—Å—Ç. –ü—Ä–æ–π–¥–∏ –π–æ–≥–æ —è–∫–Ω–∞–π–∫—Ä–∞—â–µ!\n\n3. –¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å. –£—Å–ø—ñ—Ö—É!\n\n<b>–ü–æ–±—ñ–≥–ª–∏-–∏–∏-–∏–∏–∏! </b>üèÉ",
            parse_mode="HTML",
        )
    elif index == 4:
        image = FSInputFile("app/media/marafons/New/mater.jpg")
        await message.answer_photo(
            photo=image,
            caption="<b>–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! </b>üòÑ\n–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ –ù–æ–≤–æ—Ä—ñ—á–Ω–æ–º—É –º–∞—Ä–∞—Ñ–æ–Ω—ñ üéÑ\n\n–£ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –≤—ñ–¥–µ–æ–ª–µ–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥ –∞–≤—Ç–æ—Ä—ñ–≤ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑ –æ—Å–≤—ñ—Ç–Ω—å–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É FivOne. –£ –≤—ñ–¥–µ–æ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ –≤—Å—ñ –µ—Ç–∞–ø–∏: –≤—ñ–¥ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–æ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è —ñ–≥—Ä–∞—à–æ–∫.\n\n–¢–∞–∫–æ–∂ —É –¥–µ—è–∫—ñ –¥–Ω—ñ —Ç—É—Ç –∑'—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤—ñ–¥–µ–æ, –≤ —è–∫–æ–º—É –ª–µ–∫—Ç–æ—Ä–∫–∞ –∑–Ω–∞–π–æ–º–∏—Ç–∏–º–µ —Ç–µ–±–µ –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ —Ç–∞ –¥–∞–≤–∞—Ç–∏–º–µ —Ü—ñ–∫–∞–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è üòâ\n\n–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ —Ç–∞ –º–∞–π—Å—Ç—Ä—É–≤–∞—Ç–∏ —ñ–≥—Ä–∞—à–∫–∏ —É –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π –¥–ª—è —Ç–µ–±–µ —á–∞—Å.\n\n–¢–∞–∫–æ–∂ –æ—Å—å —Ñ–∞–π–ª –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ (https://drive.google.com/file/d/1SAEblqDHBBaXE5SY68NNLal1vsMprbIa/view?usp=sharing), —è–∫—ñ —Ç–æ–±—ñ –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è.\n\nüòÅ –†–∞–¥–∏–º–æ –≤–∏–≥–æ—Ç–æ–≤–ª—è—Ç–∏ —ñ–≥—Ä–∞—à–∫–∏ –≤—Å—ñ—î—é —Å—ñ–º'—î—é –∞–±–æ —Ä–∞–∑–æ–º –∑ –¥—Ä—É–∑—è–º–∏, –±–æ —Ç–∞–∫ –≤–µ—Å–µ–ª—ñ—à–µ!\n–î—ñ–ª–∏—Å—å –∑ –¥—Ä—É–∑—è–º–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é —Ç–∞ –∑–∞–ø—Ä–æ—à—É–π –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω!\n\n<b>–¶–µ –±—É–¥–µ –∫–ª–∞—Å–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å! </b>‚õÑÔ∏è",
            parse_mode="HTML",
        )
    else:
        pass
    data = await state.get_data()
    way = data.get("way", [])
    if way[0] == 5:
        data = await state.get_data()
        les = data.get("les", [])
        await state.update_data(way=[])
        t = les[0]
        await state.update_data(les=[])
        data = await state.get_data()
        way = data.get("way", [])
        way.append(t)
        await state.update_data(way=way)
    else:
        t = way[0]
        await state.update_data(way=[])
        data = await state.get_data()
        way = data.get("way", [])
        way.append(t)
        await state.update_data(way=way)
    await state.update_data(kof=[0])
    data = await state.get_data()
    f = f"wek{t}"
    week = data.get(f, [])
    lessonKeyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=lesson)] for lesson in week],
        resize_keyboard=True,
    )
    await message.answer("–û–±–µ—Ä–∏ —Ç–∏–∂–¥–µ–Ω—å", reply_markup=lessonKeyboard)


@router.message(
    F.text.startswith(
        tuple(
            [
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ñ—ñ–∑–∏–∫–∏. –¢–∏–∂–¥–µ–Ω—å 1",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ñ—ñ–∑–∏–∫–∏. –¢–∏–∂–¥–µ–Ω—å 2",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ñ—ñ–∑–∏–∫–∏. –¢–∏–∂–¥–µ–Ω—å 3",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ö—ñ–º—ñ—ó. –¢–∏–∂–¥–µ–Ω—å 1",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ö—ñ–º—ñ—ó. –¢–∏–∂–¥–µ–Ω—å 2",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ —Ö—ñ–º—ñ—ó. –¢–∏–∂–¥–µ–Ω—å 3",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –¢–∏–∂–¥–µ–Ω—å 1",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –¢–∏–∂–¥–µ–Ω—å 2",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –¢–∏–∂–¥–µ–Ω—å 3",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ IT. –¢–∏–∂–¥–µ–Ω—å 1",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ IT. –¢–∏–∂–¥–µ–Ω—å 2",
                "–ú–∞—Ä–∞—Ñ–æ–Ω –∑ IT. –¢–∏–∂–¥–µ–Ω—å 3",
                "–ù–∞–≤–æ—Ä—ñ—á–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω. –¢–∏–∂–¥–µ–Ω—å 1",
            ]
        )
    )
)
async def Week(message: Message, state: FSMContext):
    if "‚úÖ" in message.text:
        mes = message.text[:-2]
    else:
        mes = message.text
    for i in weeks:
        if i == str(mes)[-9:]:
            index = weeks.index(i)
    data = await state.get_data()
    way = data.get("way", [])
    way.append(index)
    await state.update_data(way=way)
    current_module = sys.modules[__name__]
    if index == 0:
        data = await state.get_data()
        way = data.get("way", [])
        keyboard_name = f"leson{way[0]}"

    elif index == 1:
        data = await state.get_data()
        way = data.get("way", [])
        keyboard_name = f"lesonForWeekSecond{way[0]}"
    else:
        data = await state.get_data()
        way = data.get("way", [])
        keyboard_name = f"lesonForWeekThird{way[0]}"

    data = await state.get_data()
    week = data.get(keyboard_name, [])
    lessonKeyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=lesson)] for lesson in week],
        resize_keyboard=True,
    )

    await message.answer("–û–±–µ—Ä–∏ —É—Ä–æ–∫", reply_markup=lessonKeyboard)


# tesks
@router.message(
    F.text.startswith(
        tuple(
            [
                "–£—Ä–æ–∫ 1",
                "–£—Ä–æ–∫ 2",
                "–£—Ä–æ–∫ 3",
                "–£—Ä–æ–∫ 4",
                "–£—Ä–æ–∫ 5",
                "–£—Ä–æ–∫ 6",
                "–£—Ä–æ–∫ 7",
                "–ù–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫",
            ]
        )
    )
)
async def Lesson(message: Message, state: FSMContext):
    data = await state.get_data()
    kof = data.get("kof", [])
    les = data.get("les", [])
    way = data.get("way", [])
    if kof[0] == 1:
        await state.update_data(way=[])
        data = await state.get_data()
        way = data.get("way", [])
        way.append(les[0])
        way.append(les[1])
        await state.update_data(way=way)
        data = await state.get_data()
        way = data.get("way", [])
    if len(way) != 0:
        # num.append(way[0])
        # num.append(way[1])
        for i in lessons:
            if i == str(message.text[:6]):
                index = lessons.index(i)
        # num.append(index)
        data = await state.get_data()
        way = data.get("way", [])
        await state.update_data(num=[way[0], way[1], index])
    await state.update_data(les=[])
    # data = await state.get_data()
    # les = data.get("les", [])
    # les.append(way[0])
    # les.append(way[1])
    # les.append(index)
    data = await state.get_data()
    way = data.get("way", [])
    await state.update_data(les=[way[0], way[1], index])
    data = await state.get_data()
    num = data.get("num", [])
    lesson = LESSONS[int(num[0])]
    week = lesson[f"week_{int(num[1])}"]
    tesks = week[f"tesks_{int(num[2])}"]
    image = FSInputFile(tesks["image"])
    caption = f"<b>{tesks['text']}</b>"
    await message.answer_photo(photo=image, caption=caption, parse_mode="HTML")
    textVideo = tesks["textVideo"]
    button_text = tesks["button_text"]
    video_url = tesks["video_url"]
    if video_url != "0":
        text = f'<a href="{video_url}">{textVideo}</a>'
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{button_text}", url=f"{video_url}")]
            ]
        )
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=False,
        )

    document = tesks["docs"]
    caption = tesks["textDocs"]
    text = f'<a href="{document}">{caption}</a>'
    if document != "0":
        await message.answer(
            text,
            parse_mode="HTML",
            disable_web_page_preview=False,
        )
    dz = tesks["dz"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–î–∑ –∑—Ä–æ–±–∏–≤!", callback_data="–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!"
                )
            ]
        ]
    )
    if "addDzPr" in tesks:
        video = FSInputFile(tesks["addDzPr"])
        await message.answer_document(
            document=video,
            parse_mode="HTML",
        )
    videoExp = tesks["videoExp"]
    imageexp = FSInputFile(tesks["imgExp"])
    if tesks["imgExp"] == "0":
        if tesks["Cite"] == "0":
            try:
                if videoExp != "0":
                    video = FSInputFile(videoExp)
                    await message.answer_video(
                        video,
                        caption=dz,
                        disable_notification=True,
                        parse_mode="HTML",
                    )
                else:
                    await message.answer(
                        dz,
                        parse_mode="HTML",
                    )
            except TelegramBadRequest as e:
                if "caption is too long" in str(e):
                    await message.answer(
                        dz,
                        parse_mode="HTML",
                    )
                    await message.answer_video(
                        video,
                        disable_notification=True,
                    )
                else:
                    raise e
        else:
            text = f"{dz}"
            await message.answer(
                text,
                disable_web_page_preview=False,
                parse_mode="HTML",
            )
    else:
        try:
            await message.answer_photo(
                photo=imageexp,
                caption=dz,
                parse_mode="HTML",
            )
        except TelegramBadRequest as e:
            if "caption is too long" in str(e):
                await message.answer(
                    dz,
                    parse_mode="HTML",
                )
                await message.answer_photo(
                    photo=imageexp,
                )
            else:
                raise e
    if "docDz" in tesks:
        video = FSInputFile(tesks["docDz"])
        await message.answer_document(
            document=video,
            caption='<b>–ó—Ä–æ–±–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è "–¢–∞–±–ª–∏—Ü—è —Ü—ñ–Ω–Ω–æ—Å—Ç–µ–π"</b>',
            parse_mode="HTML",
        )
    if "docDzn" in tesks:
        await message.answer(
            text=tesks["docDzn"],
            parse_mode="HTML",
        )
    k = 1
    for i in tesks["test"]:
        if k == 1:
            await message.answer(text="–ü–µ—Ä–µ–≤—ñ—Ä —Å–µ–±–µ!", parse_mode="HTML")
        test = tesks["test"][f"test_{k}"]
        question = test["question"]
        correct_option_id = test["correct_index"]
        explanation = test["explanation"]
        options = []
        m = 0
        for n in test["options"]:
            options.append(test["options"][m])
            m += 1
        image = FSInputFile(test["img"])
        if str(test["img"]) != "0":
            await message.answer_photo(photo=image)
        if "music" in test:
            if test["music"] != "0":
                video = FSInputFile(test["music"])

                await message.answer_audio(
                    audio=video, caption="–ü–æ—Å–ª—É—Ö–∞–π —Ü–µ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –º—É–∑–∏–∫–∏:"
                )
        if str(explanation) == "0":
            if "imgCr" in test:
                await state.update_data(explat=[])
                await state.update_data(imgCr=[])
                data = await state.get_data()
                explat = data.get("explat", [])
                explat.append(test["dop"])
                await state.update_data(explat=explat)
                data = await state.get_data()
                imgCr = data.get("imgCr", [])
                imgCr.append(test["imgCr"])
                await state.update_data(imgCr=imgCr)
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è",
                                callback_data="explation",
                            )
                        ]
                    ]
                )
                await message.answer_poll(
                    question=question,
                    options=options,
                    is_anonymous=False,
                    type="quiz",
                    correct_option_id=correct_option_id,
                    reply_markup=keyboard,
                )
            else:
                await message.answer_poll(
                    question=question,
                    options=options,
                    is_anonymous=False,
                    type="quiz",
                    correct_option_id=correct_option_id,
                )
        else:
            await message.answer_poll(
                question=question,
                options=options,
                is_anonymous=False,
                type="quiz",
                correct_option_id=correct_option_id,
                explanation=explanation,
            )
        k += 1
    if "addDz" in tesks:
        text = tesks["addDz"]
        await message.answer(
            text,
            disable_web_page_preview=False,
            parse_mode="HTML",
        )
    if "addDzn" in tesks:
        text = tesks["addDzn"]
        await message.answer(
            text,
            disable_web_page_preview=False,
            parse_mode="HTML",
        )
    if "addVid" in tesks:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üé• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ",
                        url=tesks["addVid"],
                    )
                ]
            ]
        )
        text = f"–í—ñ–¥–µ–æ–ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ —Ç–∏–∂–Ω—è –Ω–∞ –º–æ–≤—ñ –°++ https://www.youtube.com/watch?v=njBJMryXkAU"
        await message.answer(
            text=text,
            parse_mode="HTML",
        )

    text = "–ü–µ—Ä–µ–≤—ñ—Ä —Å–µ–±–µ!"
    if tesks["addVideo"] != "0":
        text = f'<a href="{tesks["addVideo"]}">#–î–æ–¥–∞—Ç–∫–æ–≤–µ –≤—ñ–¥–µ–æ üëá</a>'
        button_text = "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{button_text}", url=f"{video_url}")]
            ]
        )
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=False,
        )
    data = await state.get_data()
    way = data.get("way", [])
    if int(way[1]) == 0:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —É—Ä–æ–∫", callback_data="next")]
            ]
        )
    elif int(way[1]) == 1:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —É—Ä–æ–∫", callback_data="nextsecond"
                    )
                ]
            ]
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —É—Ä–æ–∫", callback_data="nextthird"
                    )
                ]
            ]
        )
    await state.update_data(kof=[1])
    if tesks["End"] == "0":
        await state.update_data(ends=0)

        await state.update_data(num=[])
        text = "–ö—Ä–æ–∫—É–π –¥–∞–ª—ñ, —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É üëá –ü—Ä–æ–π–¥–µ–Ω–∏–π —É—Ä–æ–∫ –æ—Ç—Ä–∏–º–∞—î –ø–æ–∑–Ω–∞—á–∫—É ‚úÖ (—É—Ä–æ–∫ –∑–∞—Å–≤–æ—î–Ω–∏–π)."
    elif tesks["End"] == "1":
        await state.update_data(ends=1)
        await state.update_data(num=[])
        data = await state.get_data()
        way = data.get("way", [])
        p = way[0]
        await state.update_data(way=[])
        data = await state.get_data()
        way = data.get("way", [])
        way.append(p)
        await state.update_data(way=way)
        text = "–¶–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —É—Ä–æ–∫ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è! –ö—Ä–æ–∫—É–π –¥–∞–ª—ñ, —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É üëá –ü—Ä–æ–π–¥–µ–Ω–∏–π —É—Ä–æ–∫ –æ—Ç—Ä–∏–º–∞—î –ø–æ–∑–Ω–∞—á–∫—É ‚úÖ (—É—Ä–æ–∫ –∑–∞—Å–≤–æ—î–Ω–∏–π)."
    else:
        await state.update_data(ends=2)
        text = "–¶–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —É—Ä–æ–∫ —Ü—å–æ–≥–æ –º–∞—Ä–∞—Ñ–æ–Ω—É! –ö—Ä–æ–∫—É–π –¥–∞–ª—ñ, —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É üëá –ü—Ä–æ–π–¥–µ–Ω–∏–π —É—Ä–æ–∫ –æ—Ç—Ä–∏–º–∞—î –ø–æ–∑–Ω–∞—á–∫—É ‚úÖ (—É—Ä–æ–∫ –∑–∞—Å–≤–æ—î–Ω–∏–π)."
        await state.update_data(num=[])
        await state.update_data(way=[])
    button_text = "–ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π ‚úÖ"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{button_text}", callback_data="Done")]
        ]
    )
    await message.answer(
        text=text,
        reply_markup=keyboard,
    )

